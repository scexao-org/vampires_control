[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "vampires_control"
description = "VAMPIRES control software"
readme = "README.md"
license = {file = "LICENSE"}
authors = [{name = "Miles Lucas", email = "mdlucas@hawaii.edu"}]
requires-python = ">=3.7"
dependencies = [
    "docopt",
    "numpy",
    "scikit-image",
    "tqdm",
    "rich",
    "paramiko",
    "ruff",
    "pyyaml",
    "pydantic",
    "synphot"
]
dynamic = ["version"]

[project.optional-dependencies]
scexao = ["scxkw", "swmain", "device_control", "scxkw"]
test = ["pytest", "pytest-cov"]
docs = ["sphinx", "sphinx-rtd-theme", "myst-parser", "sphinx-autobuild", "sphinxcontrib-plantuml"]

[project.scripts]
launch_daemons = "vampires_control.launch:main"
qwp_daemon = "vampires_control.daemons.qwp_daemon:main"
vampires_temp_daemon = "vampires_control.daemons.temp_poll_daemon:main"
vampires_status = "vampires_control.status.status:main"
# camera control
get_tint = "vampires_control.cameras:get_tint"
set_tint = "vampires_control.cameras:set_tint"
target_tint = "vampires_control.cameras:target_tint"
get_fps = "vampires_control.cameras:get_fps"
set_fps = "vampires_control.cameras:set_fps"
get_trigger = "vampires_control.cameras:get_trigger"
set_trigger = "vampires_control.cameras:set_trigger"
get_readout_mode = "vampires_control.cameras:get_readout_mode"
set_readout_mode = "vampires_control.cameras:set_readout_mode"
get_crop = "vampires_control.cameras:get_crop"
set_crop = "vampires_control.cameras:set_crop"
# logging
vampires_datatype = "vampires_control.acquisition.acquire:set_datatype_main"
vampires_preplog = "vampires_control.acquisition.acquire:start_acquisition_main"
vampires_stoplog = "vampires_control.acquisition.acquire:stop_acquisition_main"
vampires_startlog = "vampires_control.acquisition.acquire:resume_acquisition_main"
vampires_pauselog = "vampires_control.acquisition.acquire:pause_acquisition_main"
# configurations
vampires_prep = "vampires_control.configurations.main:main"
# health
vampires_healthcheck = "vampires_control.status.healthcheck:main"
# calibrations
vampires_autofocus = "vampires_control.autofocus:main"
vampires_autofocus_fieldstop = "vampires_control.autofocus_fieldstop:main"
vampires_coralign = "vampires_control.coralign:main"
vampires_ptc = "vampires_control.calibration.photon_transfer_curve:main"
# take_cals = "vampires_control.calibration.calibs:main"
vampires_autodarks = "vampires_control.calibration.nightly_darks:main"
filter_sweep = "vampires_control.calibration.filter_sweep:main"
iwa_scan = "vampires_control.calibration.iwa:main"
vampires_sdi_daemon = "vampires_control.acquisition.sdi_daemon:main"
bs_calib = "vampires_control.calibration.bs_throughput:main"
pol_calib = "vampires_control.calibration.polarization_calibration:main"
drr_calib = "vampires_control.calibration.drr_calibration:main"
vampires_hotspot = "vampires_control.hotspot:hotspot"
# strehl
vampires_strehl = "vampires_control.strehl:vampires_strehl"
vampires_strehl_monitor = "vampires_control.strehl:vampires_strehl_monitor"

[tool.setuptools.dynamic]
version = {attr = "vampires_control.__version__"}

[tool.pytest.ini_options]
log_cli = false
log_cli_level = "DEBUG"
log_cli_format = "[%(levelname)s] (%(name)-15s) %(message)s"

[tool.coverage.run]
source = ["vampires_control"]


[tool.ruff.lint]
# pycodestyle, pydocstyle, isort, pyupgrade, pylint, tidyimports, use-pathlib, numpy, errmsg
select = ["E", "F", "B", "SIM", "I", "UP", "TID", "PTH", "NPY", "EM"]
ignore = [
    "E501", # line too long
]

[tool.ruff]
line-length = 100

[tool.ruff.format]
skip-magic-trailing-comma = true

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "parents"

[tool.ruff.lint.isort]
split-on-trailing-comma = false

[tool.ruff.lint.pydocstyle]
convention = "numpy"
